temp_tensor = rTensor::as.tensor(array(common_e[t,,]@data,re))
for (k in 1:K)
{
temp_tensor = rTensor::ttm(tnsr = temp_tensor, mat = A_e[[k]], m = k)
}
e_series[t,,] = temp_tensor + idio_e[t,,]
}
}
else if (K == 3)
{
for (t in 1:T)
{
temp_tensor = rTensor::as.tensor(array(common_e[t,,,]@data,re))
for (k in 1:K)
{
temp_tensor = rTensor::ttm(tnsr = temp_tensor, mat = A_e[[k]], m = k)
}
e_series[t,,,] = temp_tensor + idio_e[t,,,]
}
}
else if (K == 4)
{
for (t in 1:T)
{
temp_tensor = rTensor::as.tensor(array(common_e[t,,,,]@data,re))
for (k in 1:K)
{
temp_tensor = rTensor::ttm(tnsr = temp_tensor, mat = A_e[[k]], m = k)
}
e_series[t,,,,] = temp_tensor + idio_e[t,,,,]
}
}
else if (K == 5)
{
for (t in 1:T)
{
temp_tensor = rTensor::as.tensor(array(common_e[t,,,,,]@data,re))
for (k in 1:K)
{
temp_tensor = rTensor::ttm(tnsr = temp_tensor, mat = A_e[[k]], m = k)
}
e_series[t,,,,,] = temp_tensor + idio_e[t,,,,,]
}
}
else
{
print('K too large, need to modify last part of the function')
}
# generate the tensor time series X
X = rTensor::as.tensor(array(numeric(),c(T,d)))
# For now, we can only generate the data for K<=5, but can be easily extended with more codes if needed.
if (K == 2)
{
for (t in 1:T)
{
temp_tensor = rTensor::as.tensor(array(f_series[t,,]@data,r))
for (k in 1:K)
{
temp_tensor = rTensor::ttm(tnsr = temp_tensor, mat = A[[k]], m = k)
}
X[t,,] = temp_tensor + e_series[t,,]  + mu
}
} else if (K == 3)
{
for (t in 1:T)
{
temp_tensor = rTensor::as.tensor(array(f_series[t,,,]@data,r))
for (k in 1:K)
{
temp_tensor = rTensor::ttm(tnsr = temp_tensor, mat = A[[k]], m = k)
}
X[t,,,] = temp_tensor + e_series[t,,,]  + mu
}
}
else if (K == 4)
{
for (t in 1:T)
{
temp_tensor = rTensor::as.tensor(array(f_series[t,,,,]@data,r))
for (k in 1:K)
{
temp_tensor = rTensor::ttm(tnsr = temp_tensor, mat = A[[k]], m = k)
}
X[t,,,,] = temp_tensor + e_series[t,,,,]  + mu
}
}
else if (K == 5)
{
for (t in 1:T)
{
temp_tensor = rTensor::as.tensor(array(f_series[t,,,,,]@data,r))
for (k in 1:K)
{
temp_tensor = rTensor::ttm(tnsr = temp_tensor, mat = A[[k]], m = k)
}
X[t,,,,,] = temp_tensor + e_series[t,,,,,]  + mu
}
}
else
{
print('K too large, need to modify last part of the function')
}
return(list('X'=X,'A'=A,'F'=f_series,'E'=e_series))
}
tensor_data_gen(K,T,d,r,re,eta,u)
devtools::build()
devtools::build()
library(TensorPreAve)
# Setting tensor dimensions and parameters related to data generation
K = 2                     # The number of modes for the tensor time series
T = 100                   # Length of time series.
d = c(10,10)              # Dimensions of each mode of the tensor
r = c(2,2)                # Rank of core tensors
re = c(2,2)               # Rank of the cross-sectional common error core tensors
eta = list(c(0,0),c(0,0)) # Control factor strengths in each factor loading matrix
u = list(c(-2,2),c(-2,2)) # Control the range of elements in each factor loading matrix
set.seed(10)
Data_test = tensor_data_gen(K,T,d,r,re,eta,u)
library(TensorPreAve)
library(TensorPreAve)
# Setting tensor dimensions and parameters related to data generation
K = 2                     # The number of modes for the tensor time series
T = 100                   # Length of time series.
d = c(10,10)              # Dimensions of each mode of the tensor
r = c(2,2)                # Rank of core tensors
re = c(2,2)               # Rank of the cross-sectional common error core tensors
eta = list(c(0,0),c(0,0)) # Control factor strengths in each factor loading matrix
u = list(c(-2,2),c(-2,2)) # Control the range of elements in each factor loading matrix
set.seed(10)
Data_test = tensor_data_gen(K,T,d,r,re,eta,u)
Data_test$X
library(TensorPreAve)
?pre_est
library(TensorPreAve)
?pre_est
?tensor_data_gen
library(TensorPreAve)
# Setting tensor dimensions and parameters related to data generation
K = 2                     # The number of modes for the tensor time series
T = 100                   # Length of time series.
d = c(10,10)              # Dimensions of each mode of the tensor
r = c(2,2)                # Rank of core tensors
re = c(2,2)               # Rank of the cross-sectional common error core tensors
eta = list(c(0,0),c(0,0)) # Control factor strengths in each factor loading matrix
u = list(c(-2,2),c(-2,2)) # Control the range of elements in each factor loading matrix
set.seed(10)
Data_test = tensor_data_gen(K,T,d,r,re,eta,u)
Data_test$X
?pre_eigenplot
TensorPreAve::pre_eigenplot
devtools::document()
library(TensorPreAve)
?pre_est
?pre_eigenplot
K = 2
T = 100
d = c(40,40)
r = c(2,2)
re = c(2,2)
eta = list(c(0,0),c(0,0))
u = list(c(-2,2),c(-2,2))
set.seed(10)
Data_test = tensor_data_gen(K,T,d,r,re,eta,u)
X = Data_test$X
pre_eigenplot(X, k = 1)
set.seed(10)
pre_eigenplot(value_weight_tensor)
pre_eigenplot(value_weight_tensor, k = 1)
set.seed(10)
pre_eigenplot(value_weight_tensor, k = 1)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(21)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(1)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(2)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(2)
> pre_eigenplot(value_weight_tensor, k = 2)
set.seed(1)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(2)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(3)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(4)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(5)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(6)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(7)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(8)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(9)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(10)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(11)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(12)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(13)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(14)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(15)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(16)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(17)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(18)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(19)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(20)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(21)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(7)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(11)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(19)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(7)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(19)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(7)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(100)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(200)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(300)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(400)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(500)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(600)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(700)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(800)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(7)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(2023)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(2022)
pre_eigenplot(value_weight_tensor, k = 2)
set.seed(800)
pre_eigenplot(value_weight_tensor, k = 2)
devtools::document()
?pre_eigenplot
K = 2
T = 100
d = c(40,40)
r = c(2,2)
re = c(2,2)
eta = list(c(0,0),c(0,0))
u = list(c(-2,2),c(-2,2))
set.seed(10)
Data_test = tensor_data_gen(K,T,d,r,re,eta,u)
X = Data_test$X
pre_eigenplot(X, k = 1)
set.seed(800)
pre_eigenplot(value_weight_tensor, k = 2)
devtools::build_manual(pkg = ".", path = './doc')
devtools::build_manual()
library(TensorPreAve)
value_weight_tensor@modes
# Setting tensor dimensions and parameters related to data generation
K = 2                     # The number of modes for the tensor time series
n = 100                   # Length of time series.
d = c(10,10)              # Dimensions of each mode of the tensor
r = c(2,2)                # Rank of core tensors,
re = c(2,2)               # Rank of the cross-sectional common error core tensors
eta = list(c(0,0),c(0,0)) # Control factor strengths in each factor loading matrix
u = list(c(-2,2),c(-2,2)) # Control the range of elements in each factor loading matrix
set.seed(10)
Data_test = tensor_data_gen(K,n,d,r,re,eta,u)
X = Data_test$X
A = Data_test$A
F_ts = Data_test$F_ts
E_ts = Data_test$E_ts
X@modes
F_ts@modes
# Setting tensor dimensions and parameters related to data generation
K = 2                     # The number of modes for the tensor time series
n = 100                   # Length of time series.
d = c(10,10)              # Dimensions of each mode of the tensor
r = c(2,2)                # Rank of core tensors,
re = c(2,2)               # Rank of the cross-sectional common error core tensors
eta = list(c(0,0),c(0,0)) # Control factor strengths in each factor loading matrix
u = list(c(-2,2),c(-2,2)) # Control the range of elements in each factor loading matrix
set.seed(10)
Data_test = tensor_data_gen(K,n,d,r,re,eta,u)
X = Data_test$X
A = Data_test$A
F_ts = Data_test$F_ts
E_ts = Data_test$E_ts
X@modes
F_ts@modes
devtools::document()
devtools::document()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(TensorPreAve)
value_weight_tensor@modes
# Setting tensor dimensions and parameters related to data generation
K = 2                     # The number of modes for the tensor time series
n = 100                   # Length of time series.
d = c(10,10)              # Dimensions of each mode of the tensor
r = c(2,2)                # Rank of core tensors,
re = c(2,2)               # Rank of the cross-sectional common error core tensors
eta = list(c(0,0),c(0,0)) # Control factor strengths in each factor loading matrix
u = list(c(-2,2),c(-2,2)) # Control the range of elements in each factor loading matrix
set.seed(10)
Data_test = tensor_data_gen(K,n,d,r,re,eta,u)
X = Data_test$X
A = Data_test$A
F_ts = Data_test$F_ts
E_ts = Data_test$E_ts
X@modes
F_ts@modes
E_ts@modes
dim(A[[1]])
X = value_weight_tensor
set.seed(10)
Q_PRE_2 = pre_est(X, z = c(2,2))
Q_PRE_2
library(TensorPreAve)
?pre_est
?pre_eigenplot
?tensor_data_gen
devtools::document()
?pre_eigenplot
set.seed(800)
pre_eigenplot(value_weight_tensor, k = 2)
K = 2
T = 100
d = c(40,40)
r = c(2,2)
re = c(2,2)
eta = list(c(0,0),c(0,0))
u = list(c(-2,2),c(-2,2))
set.seed(10)
Data_test = tensor_data_gen(K,T,d,r,re,eta,u)
X = Data_test$X
pre_eigenplot(X, k = 1)
?rank_factor_est
?rank_factors_est
set.seed(10)
results = rank_factors_est(value_weight_tensor)
results
K = 2
T = 100
d = c(40,40)
r = c(2,2)
re = c(2,2)
eta = list(c(0,0),c(0,0))
u = list(c(-2,2),c(-2,2))
set.seed(10)
Data_test = tensor_data_gen(K,T,d,r,re,eta,u)
X = Data_test$X
results = rank_factors_est(X)
results
devtools::document
devtoos::document()
devtools::document()
library(TensorPreAve)
?pre_est
?pre_eigenplot
?tensor_data_gen
library(TensorPreAve)
value_weight_tensor@modes
# Setting tensor dimensions and parameters related to data generation
K = 2                     # The number of modes for the tensor time series
n = 100                   # Length of time series.
d = c(10,10)              # Dimensions of each mode of the tensor
r = c(2,2)                # Rank of core tensors
re = c(2,2)               # Rank of the cross-sectional common error core tensors
eta = list(c(0,0),c(0,0)) # Control factor strengths in each factor loading matrix
u = list(c(-2,2),c(-2,2)) # Control the range of elements in each factor loading matrix
set.seed(10)
Data_test = tensor_data_gen(K,n,d,r,re,eta,u)
X = Data_test$X
A = Data_test$A
F_ts = Data_test$F_ts
E_ts = Data_test$E_ts
X@modes
F_ts@modes
dim(A[[1]])
# Setting tensor dimensions and parameters related to data generation
K = 2                     # The number of modes for the tensor time series
n = 100                   # Length of time series.
d = c(10,10)              # Dimensions of each mode of the tensor
r = c(2,2)                # Rank of core tensors
re = c(2,2)               # Rank of the cross-sectional common error core tensors
eta = list(c(0,0),c(0,0)) # Control factor strengths in each factor loading matrix
u = list(c(-2,2),c(-2,2)) # Control the range of elements in each factor loading matrix
set.seed(10)
Data_test = tensor_data_gen(K,n,d,r,re,eta,u)
X = Data_test$X
A = Data_test$A
F_ts = Data_test$F_ts
E_ts = Data_test$E_ts
X@modes
F_ts@modes
dim(A[[1]])
library(TensorPreAve)
?tensor_data_gen
# Setting tensor dimensions and parameters related to data generation
K = 2                     # The number of modes for the tensor time series
n = 100                   # Length of time series.
d = c(10,10)              # Dimensions of each mode of the tensor
r = c(2,2)                # Rank of core tensors
re = c(2,2)               # Rank of the cross-sectional common error core tensors
eta = list(c(0,0),c(0,0)) # Control factor strengths in each factor loading matrix
u = list(c(-2,2),c(-2,2)) # Control the range of elements in each factor loading matrix
set.seed(10)
Data_test = tensor_data_gen(K,n,d,r,re,eta,u)
X = Data_test$X
A = Data_test$A
F_ts = Data_test$F_ts
E_ts = Data_test$E_ts
X@modes
# F_ts@modes
dim(A[[1]])
# Setting tensor dimensions and parameters related to data generation
K = 2                     # The number of modes for the tensor time series
n = 100                   # Length of time series.
d = c(10,10)              # Dimensions of each mode of the tensor
r = c(2,2)                # Rank of core tensors
re = c(2,2)               # Rank of the cross-sectional common error core tensors
eta = list(c(0,0),c(0,0)) # Control factor strengths in each factor loading matrix
u = list(c(-2,2),c(-2,2)) # Control the range of elements in each factor loading matrix
set.seed(10)
Data_test = tensor_data_gen(K,n,d,r,re,eta,u)
X = Data_test$X
A = Data_test$A
F_ts = Data_test$F_ts
E_ts = Data_test$E_ts
X@modes
# F_ts@modes
dim(A[[1]])
# Setting tensor dimensions and parameters related to data generation
K = 2                     # The number of modes for the tensor time series
n = 100                   # Length of time series.
d = c(10,10)              # Dimensions of each mode of the tensor
r = c(2,2)                # Rank of core tensors
re = c(2,2)               # Rank of the cross-sectional common error core tensors
eta = list(c(0,0),c(0,0)) # Control factor strengths in each factor loading matrix
u = list(c(-2,2),c(-2,2)) # Control the range of elements in each factor loading matrix
set.seed(10)
Data_test = tensor_data_gen(K,n,d,r,re,eta,u)
X = Data_test$X
A = Data_test$A
F_ts = Data_test$F_ts
E_ts = Data_test$E_ts
X@modes
F_ts@modes
dim(A[[1]])
# Setting tensor dimensions and parameters related to data generation
K = 2                     # The number of modes for the tensor time series
n = 100                   # Length of time series.
d = c(10,10)              # Dimensions of each mode of the tensor
r = c(2,2)                # Rank of core tensors
re = c(2,2)               # Rank of the cross-sectional common error core tensors
eta = list(c(0,0),c(0,0)) # Control factor strengths in each factor loading matrix
u = list(c(-2,2),c(-2,2)) # Control the range of elements in each factor loading matrix
set.seed(10)
Data_test = tensor_data_gen(K,n,d,r,re,eta,u)
X = Data_test$X
A = Data_test$A
F_ts = Data_test$F_ts
E_ts = Data_test$E_ts
X@modes
F_ts@modes
dim(A[[1]])
knit_with_parameters("E:/weilin/LSE/research/Tensor Factor Model/rework/TensorPreAve/vignettes/my-vignette.Rmd")
devtools::document()
devtools::build()
set.seed(10)
bs_rank = bs_cor_rank(X, initial_direction = Q_PROJ_1)
set.seed(10)
Q_PROJ_1 = iter_proj(X, initial_direction = Q_PRE_1)
set.seed(10)
Q_PRE_1 = pre_est(X)
Q_PRE_1
set.seed(10)
Q_PROJ_1 = iter_proj(X, initial_direction = Q_PRE_1)
Q_PROJ_1
set.seed(10)
bs_rank = bs_cor_rank(X, initial_direction = Q_PROJ_1)
bs_rank
set.seed(10)
bs_rank = bs_cor_rank(X, initial_direction = Q_PROJ_1, B = 10)
bs_rank
devtools::release()
devtools::spell_check()
devtools::release()
devtools::build_vignettes()
update
updateR()
