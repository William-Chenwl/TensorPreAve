### Our method ###
set.seed(10)
# Pre-averaging
Q_pre = pre_averaged_estimator(X, M0 = 25, M = 10)
# Iterative projection
initial_direction = list()
for (k in 1:K)
{
initial_direction[[k]] = (Q_pre[[k]][,1])
}
Q_proj = Iterative_Projection(X,initial_direction, proj_N = 30, z = c(1,1))
# Bootstrap rank estimation
bs_rank = Bootstrap_Sampling_Rank(X,Q_proj)
print('BsCorTh')
print(bs_rank)
## h0 = 1
TIPUP_result = TIPUP_ER(X, h0 = 1, ER_c = 0.1)
TIPUP_estimator = TIPUP_result[['TIPUP_estimator']]
TIPUP_rank = TIPUP_result[['ER']]
iTIPUP_ER_rank = iTIPUP_ER(X, h0 = 1, proj_N = 30, INIT_Q = TIPUP_estimator,initial_rank_estimator = TIPUP_rank, ER_c = 0.1)
print('iTIP-ER, h0 = 1')
print(iTIPUP_ER_rank)
## choose the portfolio to analyze
X = value_weight_tensor      # Value weighted portfolio
K = length(X@modes) - 1
### Our method ###
set.seed(10)
# Pre-averaging
Q_pre = pre_averaged_estimator(X, M0 = 25, M = 10)
# Iterative projection
initial_direction = list()
for (k in 1:K)
{
initial_direction[[k]] = (Q_pre[[k]][,1])
}
Q_proj = Iterative_Projection(X,initial_direction, proj_N = 30, z = c(1,1))
# Bootstrap rank estimation
bs_rank = Bootstrap_Sampling_Rank(X,Q_proj)
print('BsCorTh')
print(bs_rank)
rank_factor_loadings(X)
setwd("E:/weilin/LSE/research/Tensor Factor Model/R codes/final paper to make package/files for package/preaveragingtensor")
check()
library(preaveragingtensor)
########################## This script is for real data analysis using Fama-French portfolios data ############################
library(MASS)
library(pracma)
library(rTensor)
source("pre_averaged_functions.R")
library(preaveragingtensor)
########################## This script is for real data analysis using Fama-French portfolios data ############################
# library(MASS)
# library(pracma)
# library(rTensor)
# source("pre_averaged_functions.R")
# source("supporting_functions.R")
library(preaveragingtensor)
##### Pre-processed the data #####
value_weight_data = read.csv('ValueWeightedM-OP.csv', header = F)
equal_weight_data = read.csv('100_Portfolios_ME_OP_10x10.csv', header = F)
NYSE_return = read.csv('NYSEreturn.csv', header = F)
setwd("E:/weilin/LSE/research/Tensor Factor Model/R codes/final paper to make package")
########################## This script is for real data analysis using Fama-French portfolios data ############################
# library(MASS)
# library(pracma)
# library(rTensor)
# source("pre_averaged_functions.R")
# source("supporting_functions.R")
library(preaveragingtensor)
##### Pre-processed the data #####
value_weight_data = read.csv('ValueWeightedM-OP.csv', header = F)
equal_weight_data = read.csv('100_Portfolios_ME_OP_10x10.csv', header = F)
NYSE_return = read.csv('NYSEreturn.csv', header = F)
### Use CAPM to remove market effects
value_weight_demean = value_weight_data - apply(value_weight_data,1,mean)
equal_weight_demean = equal_weight_data - apply(equal_weight_data,1,mean)
NYSE_demean = NYSE_return[,1] - mean(NYSE_return[,1])
value_weight_CAPM = matrix(0,576,100)
for (i in 1:100)
{
value_weight_CAPM[,i] = lm(value_weight_demean[,i]~NYSE_demean - 1)$residuals
}
equal_weight_CAPM = matrix(0,576,100)
for (i in 1:100)
{
equal_weight_CAPM[,i] = lm(equal_weight_demean[,i]~NYSE_demean - 1)$residuals
}
value_weight_tensor = as.tensor(array(data.matrix(value_weight_CAPM),c(576,10,10)))
equal_weight_tensor = as.tensor(array(data.matrix(equal_weight_CAPM),c(576,10,10)))
## choose the portfolio to analyze
X = value_weight_tensor      # Value weighted portfolio
K = length(X@modes) - 1
### Our method ###
set.seed(10)
# Pre-averaging
Q_pre = pre_averaged_estimator(X, M0 = 25, M = 10)
# Iterative projection
initial_direction = list()
for (k in 1:K)
{
initial_direction[[k]] = (Q_pre[[k]][,1])
}
Q_proj = Iterative_Projection(X,initial_direction, proj_N = 30, z = c(1,1))
## choose the portfolio to analyze
X = value_weight_tensor      # Value weighted portfolio
########################## This script is for real data analysis using Fama-French portfolios data ############################
# library(MASS)
# library(pracma)
library(rTensor)
# source("pre_averaged_functions.R")
# source("supporting_functions.R")
library(preaveragingtensor)
##### Pre-processed the data #####
value_weight_data = read.csv('ValueWeightedM-OP.csv', header = F)
equal_weight_data = read.csv('100_Portfolios_ME_OP_10x10.csv', header = F)
NYSE_return = read.csv('NYSEreturn.csv', header = F)
### Use CAPM to remove market effects
value_weight_demean = value_weight_data - apply(value_weight_data,1,mean)
equal_weight_demean = equal_weight_data - apply(equal_weight_data,1,mean)
NYSE_demean = NYSE_return[,1] - mean(NYSE_return[,1])
value_weight_CAPM = matrix(0,576,100)
for (i in 1:100)
{
value_weight_CAPM[,i] = lm(value_weight_demean[,i]~NYSE_demean - 1)$residuals
}
equal_weight_CAPM = matrix(0,576,100)
for (i in 1:100)
{
equal_weight_CAPM[,i] = lm(equal_weight_demean[,i]~NYSE_demean - 1)$residuals
}
value_weight_tensor = as.tensor(array(data.matrix(value_weight_CAPM),c(576,10,10)))
equal_weight_tensor = as.tensor(array(data.matrix(equal_weight_CAPM),c(576,10,10)))
## choose the portfolio to analyze
X = value_weight_tensor      # Value weighted portfolio
K = length(X@modes) - 1
### Our method ###
set.seed(10)
# Pre-averaging
Q_pre = pre_averaged_estimator(X, M0 = 25, M = 10)
# Iterative projection
initial_direction = list()
for (k in 1:K)
{
initial_direction[[k]] = (Q_pre[[k]][,1])
}
Q_proj = Iterative_Projection(X,initial_direction, proj_N = 30, z = c(1,1))
# Bootstrap rank estimation
bs_rank = Bootstrap_Sampling_Rank(X,Q_proj)
print('BsCorTh')
print(bs_rank)
## h0 = 1
TIPUP_result = TIPUP_ER(X, h0 = 1, ER_c = 0.1)
TIPUP_estimator = TIPUP_result[['TIPUP_estimator']]
value_weight_tensor = readRDS('value_weight_tensor.rda')
value_weight_tensor = load(file = 'value_weight_tensor.rda')
value_weight_tensor
load(file = 'value_weight_tensor.rda')
value_weight_tensor
load(file = 'equal_weight_tensor.rda')
## choose the portfolio to analyze
X = value_weight_tensor      # Value weighted portfolio
K = length(X@modes) - 1
set.seed(10)
rank_factor_loadings(X, M0 = 25, M = 10, r_range = list(c(1,5),c(1,5)))
set.seed(10)
rank_factor_loadings(X, M0 = 25, M = 10)
# set.seed(10)
# rank_factor_loadings(X, M0 = 25, M = 10, r_range = list(c(1,5),c(1,5)))
set.seed(10)
rank_factor_loadings(X, M0 = 25, M = 10)
?pre_averaged_estimator
?Iterative_Projection
?Bootstrap_Sampling_Rank
?pre_averaged_estimator
?rank_factor_loadings
?pre_averaged_estimator
?Bootstrap_Sampling_Rank
setwd("E:/weilin/LSE/research/Tensor Factor Model/R codes/final paper to make package/files for package/preaveragingtensor")
library(preaveragingtensor)
# library(MASS)
# library(pracma)
# library(rTensor)
# source("pre_averaging_functions.R")
library(preaveragingtensor)
?rank_factor_loadings
library(preaveragingtensor)
?rank_factor_loadings
devtools::check()
library(preaveragingtensor)
?rank_factor_loadings
setwd("E:/weilin/LSE/research/Tensor Factor Model/R codes/final paper to make package/files for package")
# library(MASS)
# library(pracma)
# library(rTensor)
# source("pre_averaging_functions.R")
library(preaveragingtensor)
load(file = 'value_weight_tensor.rda')
load(file = 'equal_weight_tensor.rda')
## choose the portfolio to analyze
X = value_weight_tensor      # Value weighted portfolio
K = length(X@modes) - 1
# set.seed(10)
# rank_factor_loadings(X, M0 = 25, M = 10, r_range = list(c(1,5),c(1,5)))
set.seed(10)
Q_PRE = pre_averaged_estimator(X)
Q_PRE
Q_PROJ = Iterative_Projection(X, initial_direction = Q_PRE)
Q_PROJ
bs_rank = rank_factor_loadings(X, Q_PROJ, M0 = 25, M = 10)
bs_rank = Bootstrap_Sampling_Rank(X, Q_PROJ, M0 = 25, M = 10)
bs_rank = Bootstrap_Sampling_Rank(X, Q_PROJ)
bs_rank
# set.seed(10)
# rank_factor_loadings(X, M0 = 25, M = 10, r_range = list(c(1,5),c(1,5)))
set.seed(10)
Q_PRE = pre_averaged_estimator(X)
Q_PROJ = Iterative_Projection(X, initial_direction = Q_PRE)
bs_rank = Bootstrap_Sampling_Rank(X, Q_PROJ)
bs_rank
## choose the portfolio to analyze
# X = value_weight_tensor      # Value weighted portfolio
X = equal_weight_tensor     # Equal weight portfolio
# set.seed(10)
# rank_factor_loadings(X, M0 = 25, M = 10, r_range = list(c(1,5),c(1,5)))
set.seed(10)
Q_PRE = pre_averaged_estimator(X)
Q_PROJ = Iterative_Projection(X, initial_direction = Q_PRE)
bs_rank = Bootstrap_Sampling_Rank(X, Q_PROJ)
bs_rank
rank_factor_loadings(X)
set.seed(10)
rank_factor_loadings(X)
## choose the portfolio to analyze
# X = value_weight_tensor      # Value weighted portfolio
X = equal_weight_tensor     # Equal weight portfolio
library(preaveragingtensor)
# value_weight_data = read.csv('ValueWeightedM-OP.csv', header = F)
# equal_weight_data = read.csv('100_Portfolios_ME_OP_10x10.csv', header = F)
#
# NYSE_return = read.csv('NYSEreturn.csv', header = F)
#
#
#
# ### Use CAPM to remove market effects
# value_weight_demean = value_weight_data - apply(value_weight_data,1,mean)
# equal_weight_demean = equal_weight_data - apply(equal_weight_data,1,mean)
# NYSE_demean = NYSE_return[,1] - mean(NYSE_return[,1])
#
# value_weight_CAPM = matrix(0,576,100)
# for (i in 1:100)
# {
#   value_weight_CAPM[,i] = lm(value_weight_demean[,i]~NYSE_demean - 1)$residuals
# }
#
# equal_weight_CAPM = matrix(0,576,100)
# for (i in 1:100)
# {
#   equal_weight_CAPM[,i] = lm(equal_weight_demean[,i]~NYSE_demean - 1)$residuals
# }
#
# value_weight_tensor = as.tensor(array(data.matrix(value_weight_CAPM),c(576,10,10)))
# equal_weight_tensor = as.tensor(array(data.matrix(equal_weight_CAPM),c(576,10,10)))
load(file = 'value_weight_tensor.rda')
load(file = 'equal_weight_tensor.rda')
## choose the portfolio to analyze
# X = value_weight_tensor      # Value weighted portfolio
X = equal_weight_tensor     # Equal weight portfolio
set.seed(10)
rank_factor_loadings(X)
set.seed(10)
Q_PRE = pre_averaged_estimator(X)
Q_PROJ = Iterative_Projection(X, initial_direction = Q_PRE)
bs_rank = Bootstrap_Sampling_Rank(X, Q_PROJ)
## choose the portfolio to analyze
X = value_weight_tensor      # Value weighted portfolio
set.seed(10)
rank_factor_loadings(X)
set.seed(10)
Q_PRE = pre_averaged_estimator(X)
Q_PROJ = Iterative_Projection(X, initial_direction = Q_PRE)
bs_rank = Bootstrap_Sampling_Rank(X, Q_PROJ)
d
devtools::check()
setwd("E:/weilin/LSE/research/Tensor Factor Model/R codes/final paper to make package/files for package/preaveragingtensor")
devtools::check()
library(preaveragingtensor)
?pre_averaged_estimator
library(preaveragingtensor)
?pre_averaged_estimator
devtools::check()
library(preaveragingtensor)
?pre_averaged_estimator
?Bootstrap_Sampling_Rank
?pre_averaged_estimator
devtools::check()
library(preaveragingtensor)
?pre_averaged_estimator
?Iterative_Projection
?Bootstrap_Sampling_Rank
?rank_factor_loadings
library(MASS)
library(pracma)
library(rTensor)
source("pre_averaged_functions.R")
setwd("E:/weilin/LSE/research/Tensor Factor Model/R codes/final paper to make package")
library(MASS)
library(pracma)
library(rTensor)
source("pre_averaged_functions.R")
source("supporting_functions.R")
##### Pre-processed the data #####
value_weight_data = read.csv('ValueWeightedM-OP.csv', header = F)
equal_weight_data = read.csv('100_Portfolios_ME_OP_10x10.csv', header = F)
NYSE_return = read.csv('NYSEreturn.csv', header = F)
### Use CAPM to remove market effects
value_weight_demean = value_weight_data - apply(value_weight_data,1,mean)
equal_weight_demean = equal_weight_data - apply(equal_weight_data,1,mean)
NYSE_demean = NYSE_return[,1] - mean(NYSE_return[,1])
value_weight_CAPM = matrix(0,576,100)
for (i in 1:100)
{
value_weight_CAPM[,i] = lm(value_weight_demean[,i]~NYSE_demean - 1)$residuals
}
equal_weight_CAPM = matrix(0,576,100)
for (i in 1:100)
{
equal_weight_CAPM[,i] = lm(equal_weight_demean[,i]~NYSE_demean - 1)$residuals
}
value_weight_tensor = as.tensor(array(data.matrix(value_weight_CAPM),c(576,10,10)))
equal_weight_tensor = as.tensor(array(data.matrix(equal_weight_CAPM),c(576,10,10)))
setwd("E:/weilin/LSE/research/Tensor Factor Model/R codes/final paper to make package/files for package/preaveragingtensor")
usethis::use_data(value_weight_tensor)
usethis::use_data(equal_weight_tensor)
devtools::check()
library(preaveragingtensor)
library(preaveragingtensor)
?rank_factor_loadings
library(preaveragingtensor)
?rank_factor_loadings
devtools::check()
devtools::check()
devtools::check()
library(preaveragingtensor)
?rank_factor_loadings
devtools::check()
devtools::check()
library(preaveragingtensor)
?pre_averaged_estimator
?Iterative_Projection
?Bootstrap_Sampling_Rank
?rank_factor_loadings
devtools::check()
library(preaveragingtensor)
?rank_factor_loadings
?pre_averaged_estimator
?Iterative_Projection
devtools::check()
library(preaveragingtensor)
?rank_factor_loadings
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(preaveragingtensor)
?tensor_data_gen
?Generate_Data
devtools::check()
devtools::check()
devtools::check()
K = 2
T = 100
d = c(40,40)
r = c(2,2)
re = 10
eta = list(c(0,0),c(0,0))
u = list(c(-2,2),c(-2,2))
set.seed(10)
Data_test = tensor_data_gen(K,T,d,r,re,eta,u)
Q_PRE = pre_averaged_estimator(Data_test)
View(Data_test)
devtools::check()
library(preaveragingtensor)
?pre_averaged_estimator
?Iterative_Projection
?Bootstrap_Sampling_Rank
?rank_factor_loadings
pre_averaged_estimator(Data_test$X, M0 = -2)
pre_averaged_estimator(Data_test$X, M = -2)
library(preaveragingtensor)
?rank_factor_loadings
usethis::use_vignette("my-vignette")
devtools::build_manual()
rlang::last_error()
rlang::last_trace()
tinytex::tlmgr_install("makeindex")
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
tinytex::tlmgr_install("makeindex")
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
library(preaveragingtensor)
?pre_averaged_estimator
devtools::check()
library(preaveragingtensor)
?pre_averaged_estimator
devtools::build_manual()
devtools::build_manual()
usethis::use_vignette("my-vignette")
library(preaveragingtensor)
value_weight_tensor
head(value_weight_tensor)
head(value_weight_tensor)
value_weight_tensor
value_weight_tensor
# Setting tensor dimensions and parameters related to data generation
K = 2                     # The number of modes for the tensor time series
T = 100                   # Length of time series.
d = c(40,40)              # Dimensions of each mode of the tensor
r = c(2,2)                # Rank of core tensors,
re = 10                   # Dimension of the cross-sectional common error
eta = list(c(0,0),c(0,0)) # Control factor strengths in each factor loading matrix
u = list(c(-2,2),c(-2,2)) # Control the range of elements in each factor loading matrix
set.seed(10)
Data_test = tensor_data_gen(K,T,d,r,re,eta,u)
Data_test$X
set.seed(10)
Q_PRE_2 = pre_averaged_estimator(value_weight_tensor, z = c(2,2))
Q_PRE_2
set.seed(10)
Q_PRE_1 = pre_averaged_estimator(value_weight_tensor)
Q_PRE_1
set.seed(10)
Q_PRE_2 = pre_averaged_estimator(value_weight_tensor, z = c(2,2))
Q_PRE_2
set.seed(10)
Q_PRE_1 = pre_averaged_estimator(X)
X = Data_test$X
set.seed(10)
Q_PRE_2 = pre_averaged_estimator(X, z = c(2,2))
Q_PRE_2
set.seed(10)
Q_PRE_1 = pre_averaged_estimator(X)
Q_PRE_1
set.seed(10)
Q_PROJ = Iterative_Projection(value_weight_tensor, initial_direction = Q_PRE_1)
set.seed(10)
Q_PROJ = Iterative_Projection(X, initial_direction = Q_PRE_1)
set.seed(10)
Q_PROJ = Iterative_Projection(X, initial_direction = Q_PRE_1)
Q_PROJ
set.seed(10)
Q_PROJ_1 = Iterative_Projection(X, initial_direction = Q_PRE_1, z = c(2,2))
Q_PROJ_1
set.seed(10)
Q_PROJ_1 = Iterative_Projection(X, initial_direction = Q_PRE_1)
Q_PROJ_1
set.seed(10)
bs_rank = Bootstrap_Sampling_Rank(X, Q_PROJ_1)
bs_rank
set.seed(10)
results = rank_factor_loadings(X)
set.seed(10)
results = rank_factor_loadings(X)
results
set.seed(10)
results = rank_factor_loadings(X, input_r = c(2,2))
results
# Setting tensor dimensions and parameters related to data generation
K = 2                     # The number of modes for the tensor time series
T = 100                   # Length of time series.
d = c(10,10)              # Dimensions of each mode of the tensor
r = c(2,2)                # Rank of core tensors,
re = 10                   # Dimension of the cross-sectional common error
eta = list(c(0,0),c(0,0)) # Control factor strengths in each factor loading matrix
u = list(c(-2,2),c(-2,2)) # Control the range of elements in each factor loading matrix
set.seed(10)
Data_test = tensor_data_gen(K,T,d,r,re,eta,u)
Data_test$X
devtools::check()
library(preaveragingtensor)
?rank_factor_loadings
devtools::build_manual()
devtools::build_manual()
devtools::check()
library(preaveragingtensor)
?rank_factor_loadings
?tensor_data_gen
devtools::build_manual()
devtools::check()
library(TensorPreAve)
?rank_factor_loadings
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(TensorPreAve)
?pre_est
?iter_proj
?bs_cor_rank
?rank_factors_est
?tensor_data_gen
devtools::check()
library(TensorPreAve)
devtools::build_manual()
library(TensorPreAve)
?pre_est
